import json
import sys
import typing as t

from aiohttp import ClientSession
from discord import Attachment
from discord.errors import NotFound
from loguru import logger


async def upload_files(
    http_session: ClientSession,
    files: t.Sequence[dict],
    paste_name: str = "Automatic paste.",
    paste_description: str = "This paste was automatically generated by NeutronBot.",
) -> t.Optional[str]:
    """
    Try to upload given `files` to paste.gg service with `http_session`.

    `files` is a list of json dicts containing all of the files intended to be uploaded.
    This should only be a partial payload to paste.gg, describing the files themselves,
    not the whole payload. Example formatting of this list of dictionaries is described in the
    API documentation for paste.gg: https://github.com/ascclemens/paste/blob/master/api.md

    You can also specify `name` and `description`, of given paste.
    This function will return the URL to pasted content, or `None` if pasting failed.
    """
    # Make sure to convert files sequence to list
    # payload must be using list for json.dumps to work properly
    if not isinstance(files, list):
        files = list(files)

    payload = {
        "name": paste_name,
        "description": paste_description,
        "files": files
    }

    logger.debug(f"Uploading {len(files)} file{'s' if len(files) > 1 else ''} to paste.gg, size: {sys.getsizeof(files)}B")
    try:
        response = await http_session.post(
            "https://api.paste.gg/v1/pastes",
            headers={"Content-Type": "application/json"},
            data=json.dumps(payload)
        )
    except ConnectionError:
        logger.warning("Failed to paste content to paste.gg, Ended with ConnectionError.")
        return

    if response.status != 201:
        logger.warning(f"Failed to paste content to paste.gg, ended with {response.status}.")
        return
    json_response = await response.json()
    paste_id = json_response["result"]["id"]
    return f"https://www.paste.gg/{paste_id}"


async def upload_text(
    http_session: ClientSession,
    text: str,
    file_name: str = "text.txt",
    paste_name: str = "Automatic text paste.",
    paste_description: str = "This paste was automatically generated from given text.",
) -> t.Optional[str]:
    """
    Try to upload given `text` to paste.gg service.

    You can also specify `file_name`, `paste_name` and `paste_description`, of given paste.
    This function will return the URL to pasted content, or `None` if pasting failed.
    """
    payload = {
        "name": file_name,
        "content": {
            "format": "text",
            "value": text
        }
    }

    return await upload_files(
        http_session,
        files=[payload],
        paste_name=paste_name,
        paste_description=paste_description
    )


async def upload_attachments(http_session: ClientSession, attachments: t.List[Attachment], max_file_size: int = 500_000) -> t.Optional[str]:
    """
    Try to upload given `attachments` to paste.gg service.

    Attachments which doesn't follow UTF-8 encoding will be ignored.
    Attachments which weren't found (were already removed) will be ignored.
    Attachments over `max_file_size` (defaults to 500KB) will be ignored.
    If there aren't any applicable attachments to be uploaded, return None.
    Otherwise return URL to the uploaded content of given attachments.
    """
    files = []
    for attachment in attachments:
        # Don't try loading files over maximum size
        if attachment.size > max_file_size:
            logger.debug(f"Attachment {attachment.filename} skipped, maximum size surpassed ({attachment.size} > {max_file_size})")
            continue

        try:
            content = await attachment.read()
            value = content.decode("utf-8")
        except (NotFound, UnicodeDecodeError):
            continue
        else:
            files.append({
                "name": attachment.filename,
                "content": {
                    "format": "text",
                    "value": value
                }
            })

    if len(files) == 0:
        return

    return await upload_files(
        http_session, files,
        paste_name="Automatic attachment paste.",
        paste_description="This paste was automatically generated from a discord message attachment."
    )
