on:
  push:
    branches:
      - master
  pull_request:

# env:
#   # Make sure pip caches dependencies and installs as user
#   PIP_NO_CACHE_DIR: false
#   PIP_USER: 1

#   # Make sure pipenv doesn't use fancy graphics
#   PIPENV_HIDE_EMOJIS: 1
#   PIPENV_NOSPIN: 1

#   # Make sure pipenv does not try reuse an environment it's running in
#   PIPENV_IGNORE_VIRTUALENVS: 1

#   # Use direct paths to allow caching
#   PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
#   PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit-cache

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Configure pip to cache dependencies and do a user install
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1

      # Hide the graphical elements from pipenv's output
      PIPENV_HIDE_EMOJIS: 1
      PIPENV_NOSPIN: 1

      # Make sure pipenv does not try reuse an environment it's running in
      PIPENV_IGNORE_VIRTUALENVS: 1

      # Specify explicit paths for python dependencies and the pre-commit
      # environment so we know which directories to cache
      PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
      PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit-cache

    steps:
    - name: Add custom PYTHONUSERBASE to PATH
      run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # Cache python dependencies
    # the key is a composite of multiple values which
    # when changed, the cache won't be restored
    # in order to make updating possible
    - name: Python Dependency Caching
      uses: actions/cache@v2
      id: python_cache
      with:
        path: ${{ env.PYTHONUSERBASE }}
        key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
        ${{ steps.python.outputs.python-version }}-\
        ${{ hashFiles('./Pipfile', './Pipfile.lock') }}"

    # In case dependencies weren't restored, install them
    - name: Install dependencies with pipenv
      if: steps.python_cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip setuptools wheel pipenv
        python -m pipenv install --dev --deploy --system

    # Cache pre-commit environment
    # the key consists relevant factors to allow
    # updating, when pre-commit changes
    - name: Pre-commit Environment Caching
      uses: actions/cache@v2
      with:
        path: ${{ env.PRE_COMMIT_HOME }}
        key: "precommit-0-${{ runner.os }}-${{ env.PRE_COMMIT_HOME }}-\
        ${{ steps.python.outputs.python-version }}-\
        ${{ hashFiles('./.pre-commit-config.yaml') }}"

    # As pre-commit does not support user installs, we set
    # PIP_USER=0 to not do a user install.
    - name: Run pre-commit hooks
      run: |
        export PIP_USER=0; SKIP=flake8 pre-commit run --all-files

    - name: Debug
      run: |
        echo $GITHUB_PATH
        echo $PATH
        echo ${{ env.PYTHONUSERBASE }}

    - name: Run flake8
      run: "flake8"
